Program -> ProgramHead DeclarePart ProgramBody	{'PROGRAM'}
ProgramHead -> PROGRAM ProgramName	{'PROGRAM'}
ProgramName -> ID	{'ID'}
DeclarePart -> TypeDec VarDec ProcDec	{'TYPE', 'PROCEDURE', 'BEGIN', 'VAR'}
TypeDec -> ε	{'BEGIN', 'PROCEDURE', 'VAR'}
TypeDec -> TypeDeclaration	{'TYPE'}
TypeDeclaration -> TYPE TypeDecList	{'TYPE'}
TypeDecList -> TypeId = TypeName ; TypeDecMore	{'ID'}
TypeDecMore -> ε	{'BEGIN', 'PROCEDURE', 'VAR'}
TypeDecMore -> TypeDecList	{'ID'}
TypeId -> ID	{'ID'}
TypeName -> BaseType	{'CHAR', 'INTEGER'}
TypeName -> StructureType	{'RECORD', 'ARRAY'}
TypeName -> ID	{'ID'}
BaseType -> INTEGER	{'INTEGER'}
BaseType -> CHAR	{'CHAR'}
StructureType -> ArrayType	{'ARRAY'}
StructureType -> RecType	{'RECORD'}
ArrayType -> ARRAY [ Low .. Top ] OF BaseType	{'ARRAY'}
Low -> INTC	{'INTC'}
Top -> INTC	{'INTC'}
RecType -> RECORD FieldDecList END	{'RECORD'}
FieldDecList -> BaseType IdList ; FieldDecMore	{'CHAR', 'INTEGER'}
FieldDecList -> ArrayType IdList ; FieldDecMore	{'ARRAY'}
FieldDecMore -> ε	{'END'}
FieldDecMore -> FieldDecList	{'ARRAY', 'CHAR', 'INTEGER'}
IdList -> ID IdMore	{'ID'}
IdMore -> ε	{';'}
IdMore -> , IdList	{','}
VarDec -> ε	{'BEGIN', 'PROCEDURE'}
VarDec -> VarDeclaration	{'VAR'}
VarDeclaration -> VAR VarDecList	{'VAR'}
VarDecList -> TypeName VarIdList ; VarDecMore	{'ARRAY', 'CHAR', 'INTEGER', 'RECORD', 'ID'}
VarDecMore -> ε	{'BEGIN', 'PROCEDURE'}
VarDecMore -> VarDecList	{'ARRAY', 'CHAR', 'INTEGER', 'RECORD', 'ID'}
VarIdList -> ID VarIdMore	{'ID'}
VarIdMore -> ε	{';'}
VarIdMore -> , VarIdList	{','}
ProcDec -> ε	{'BEGIN'}
ProcDec -> ProcDeclaration	{'PROCEDURE'}
ProcDeclaration -> PROCEDURE ProcName ( ParamList ) ; ProcDecPart ProcBody ProcDecMore	{'PROCEDURE'}
ProcDecMore -> ε	{'BEGIN'}
ProcDecMore -> ProcDeclaration	{'PROCEDURE'}
ProcName -> ID	{'ID'}
ParamList -> ε	{')'}
ParamList -> ParamDecList	{'ARRAY', 'CHAR', 'INTEGER', 'RECORD', 'ID', 'VAR'}
ParamDecList -> Param ParamMore	{'ARRAY', 'CHAR', 'INTEGER', 'RECORD', 'ID', 'VAR'}
ParamMore -> ε	{')'}
ParamMore -> ; ParamDecList	{';'}
Param -> TypeName FormList	{'ARRAY', 'CHAR', 'INTEGER', 'RECORD', 'ID'}
Param -> VAR TypeName FormList	{'VAR'}
FormList -> ID FidMore	{'ID'}
FidMore -> ε	{';', ')'}
FidMore -> , FormList	{','}
ProcDecPart -> DeclarePart	{'TYPE', 'PROCEDURE', 'BEGIN', 'VAR'}
ProcBody -> ProgramBody	{'BEGIN'}
ProgramBody -> BEGIN StmList END	{'BEGIN'}
StmList -> Stm StmMore	{'READ', 'IF', 'WHILE', 'ID', 'RETURN', 'WRITE'}
StmMore -> ε	{'ELSE', 'FI', 'END', 'ENDWH'}
StmMore -> ; StmList	{';'}
Stm -> ConditionalStm	{'IF'}
Stm -> LoopStm	{'WHILE'}
Stm -> InputStm	{'READ'}
Stm -> OutputStm	{'WRITE'}
Stm -> ReturnStm	{'RETURN'}
Stm -> ID AssCall	{'ID'}
AssCall -> AssignmentRest	{':=', '.', '['}
AssCall -> CallStmRest	{'('}
AssignmentRest -> VariMore := Exp	{':=', '.', '['}
ConditionalStm -> IF RelExp THEN StmList ELSE StmList FI	{'IF'}
LoopStm -> WHILE RelExp DO StmList ENDWH	{'WHILE'}
InputStm -> READ ( Invar )	{'READ'}
Invar -> ID	{'ID'}
OutputStm -> WRITE ( Exp )	{'WRITE'}
ReturnStm -> RETURN ( Exp )	{'RETURN'}
CallStmRest -> ( ActParamList )	{'('}
ActParamList -> ε	{')'}
ActParamList -> Exp ActParamMore	{'(', 'ID', 'INTC'}
ActParamMore -> ε	{')'}
ActParamMore -> , ActParamList	{','}
RelExp -> Exp OtherRelE	{'(', 'ID', 'INTC'}
OtherRelE -> CmpOp Exp	{'=', '<'}
Exp -> Term OtherTerm	{'(', 'ID', 'INTC'}
OtherTerm -> ε	{'ELSE', 'FI', ';', 'THEN', '=', ',', 'ENDWH', '<', ']', 'DO', 'END', ')'}
OtherTerm -> AddOp Exp	{'+', '-'}
Term -> Factor OtherFactor	{'(', 'ID', 'INTC'}
OtherFactor -> ε	{'ELSE', 'FI', ';', 'THEN', '=', ',', 'ENDWH', '<', '+', ']', '-', 'DO', 'END', ')'}
OtherFactor -> MultOp Term	{'*', '/'}
Factor -> ( Exp )	{'('}
Factor -> INTC	{'INTC'}
Factor -> Variable	{'ID'}
Variable -> ID VariMore	{'ID'}
VariMore -> ε	{'ELSE', ';', 'THEN', '/', '<', '+', '-', 'DO', ')', 'FI', '*', '=', ',', ':=', ']', 'END', 'ENDWH'}
VariMore -> [ Exp ]	{'['}
VariMore -> . FieldVar	{'.'}
FieldVar -> ID FieldVarMore	{'ID'}
FieldVarMore -> ε	{'ELSE', ';', 'THEN', '/', '<', '+', '-', 'DO', ')', 'FI', '*', '=', ',', ':=', ']', 'END', 'ENDWH'}
FieldVarMore -> [ Exp ]	{'['}
CmpOp -> <	{'<'}
CmpOp -> =	{'='}
AddOp -> +	{'+'}
AddOp -> -	{'-'}
MultOp -> *	{'*'}
MultOp -> /	{'/'}
